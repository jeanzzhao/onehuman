split_pairs_wc = glob_wildcards('../grist/outputs/mapping/{metagenome}.x.{genome}.mapped.fq.gz')
metagenomes = set(split_pairs_wc.metagenome)
print('METAGENOMES:', metagenomes)
PAIRS, = glob_wildcards('../grist/outputs/mapping/{pair}.mapped.fq.gz')

rule all:
    input:
        expand("{metagenomes}.out.csv", metagenomes=metagenomes),
        expand("{pair}.trim.csv", pair=PAIRS),
        expand("{pair}.assem.csv", pair=PAIRS),
        expand("{pair}.mapassem.csv", pair=PAIRS),

rule out_csv:
    input:
        summary_csv= "../grist/outputs/mapping/{metagenomes}.summary.csv",
    output:
        csvfile= "{metagenomes}.out.csv",
    conda: "env-diff.yml"
    threads: 1
    shell: """
    ./join-summary-with-assemloss.py {input.summary_csv} ./ -o {output}
    """

rule trim_containment:
    input:
        trim_sig = "../grist/outputs/trim/{metagenome}.trim.fq.gz.sig",
        genome_sig = "../grist/outputs/genomes/{genome}_genomic.sig",
    output:
        trim_csv= "{metagenome}.x.{genome}.trim.csv",
    conda: "env-diff.yml"
    threads: 1
    shell: """
       sourmash search --containment {input.genome_sig} {input.trim_sig} -o {output} --threshold=0
    """

rule assem_containment:
    input:
        assem_sig = "../assembly/{metagenome}.megahit.fa.gz.sig",
        genome_sig = "../grist/outputs/genomes/{genome}_genomic.sig",
    output:
        assem_csv= "{metagenome}.x.{genome}.assem.csv",
    conda: "env-diff.yml"
    threads: 1
    shell: """
       sourmash search --containment {input.genome_sig} {input.assem_sig} -o {output} --threshold=0
    """

rule mapassem_containment:
    input:
        mapassem_sig = "{metagenome}.x.ma.fq.gz.sig",
        genome_sig = "../grist/outputs/genomes/{genome}_genomic.sig",
    output:
        mapassem_csv= "{metagenome}.x.{genome}.mapassem.csv",
    conda: "env-diff.yml"
    threads: 1
    shell: """
       sourmash search --containment {input.genome_sig} {input.mapassem_sig} -o {output} --threshold=0
    """

# minimap align trimmed reads to the "ma"
rule minimap:
    input:
        assembly= "../assembly/{metagenome}.megahit.fa.gz",
        trimmed_reads="../grist/outputs/trim/{metagenome}.trim.fq.gz",
    output:
        minimap= "{metagenome}.x.ma.bam",
    conda: "env-diff.yml"
    threads: 16
    shell: """
        minimap2 -ax sr -t 16 {input.assembly} {input.trimmed_reads} | samtools view -b -F 4 - | samtools sort - > {output.minimap}
    """

# .bam to .fq file
rule samtool:
    input:
        bamfile= "{metagenome}.x.ma.bam",
    output:
        samfile= "{metagenome}.x.ma.fq.gz",
    conda: "env-diff.yml"
    threads: 1
    shell: """
        samtools bam2fq {input.bamfile} | gzip -9c > {output.samfile}
    """    

# sketch reads mapped to assembly
rule mapassem_sketch:
    input:
       mapassem= "{metagenome}.x.ma.fq.gz",
    output:
       mapassem_sketch= "{metagenome}.x.ma.fq.gz.sig",

    conda: "env-diff.yml"
    shell: """
        sourmash sketch dna {input} -o {output}
    """
# sketch all trimmed reads
rule trim_sketch:
    input:
       trim_reads="../grist/outputs/trim/{metagenome}.trim.fq.gz",
    output:
       trim_sketch= "../grist/outputs/trim/{metagenome}.trim.fq.gz.sig",
    conda: "env-diff.yml"
    shell: """
        sourmash sketch dna {input} -o {output}
    """

# sketch genomes
rule genome_sketch:
    input:
        genome= "../grist/outputs/genomes/{genome}_genomic.fna.gz",
    output:
        genome_sketch= "../grist/outputs/genomes/{genome}_genomic.sig",
    conda: "env-diff.yml"
    shell: """
        sourmash sketch dna {input} -o {output}
    """
